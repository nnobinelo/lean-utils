import argparse
import matplotlib.pyplot as plt
import json
from pathlib import Path
from LeanUtils.utils import get_backtest_id
from datetime import datetime, timezone


def plot_backtest(backtest_dir):
    backtest_id = get_backtest_id(backtest_dir)
    backtest_dir = Path(backtest_dir).resolve()
    backtest_results_path = backtest_dir / f"{backtest_id}.json"
    backtest_order_results_path = backtest_dir / f"{backtest_id}-order-events.json"

    with open(backtest_results_path) as json_file:
        backtest_results = json.load(json_file)
    with open(backtest_order_results_path) as json_file:
        backtest_order_results = json.load(json_file)

    close_values = backtest_results["Charts"]["Backtest Results"]["Series"]["close price"]["Values"]
    x_vals = [datetime.fromtimestamp(point["x"], tz=timezone.utc) for point in close_values]
    y_vals = [point["y"] for point in close_values]

    fig, axes = plt.subplots()
    axes.plot(y_vals)
    x_labels = [dt.strftime('%Y-%m-%d %H:%M') for dt in x_vals]
    label_divider = 1   # 1 to display every x label, 2 for every 2nd, 3 for every 3rd, etc.
    if label_divider > 1:
        x_labels = [dt.strftime('%Y-%m-%d %H:%M') * ((i + 1) % label_divider) for i, dt in enumerate(x_vals)]
    axes.set_xticklabels(x_labels, rotation=60, wrap=True)

    plt.show()


def main():
    parser = argparse.ArgumentParser(description="Plot backtest results from Lean w/ Matplotlib")
    parser.add_argument("backtest_dir", help="Path to a backtest directory generated by Lean containing result JSONs.")
    args = vars(parser.parse_args())
    plot_backtest(**args)


if __name__ == "__main__":
    pass
